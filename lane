import tkinter as tk
from tkinter import Canvas
import cv2
import numpy as np
from PIL import Image, ImageTk
import threading


def draw_lines(img, lines):
   
    for line in lines:
        for x1, y1, x2, y2 in line:
            cv2.line(img, (x1, y1), (x2, y2), (0, 255, 0), 3)


def detect_lanes(frame):
   
    # Convert to grayscale
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    # Apply Gaussian blur
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    # Canny edge detection
    edges = cv2.Canny(blur, 50, 150)

   
    height, width = frame.shape[:2]
    roi_points = np.array([
        [(width * 0.01, height),  # Bottom left
         (width * 0.99, height),  # Bottom right
         (width * 0.9, height * 0.3),  # Top right
         (width * 0.1, height * 0.3)]  # Top left
    ], np.int32)

    # Draw the ROI polygon on the frame
    cv2.polylines(frame, [roi_points], isClosed=True, color=(255, 0, 0), thickness=2)

    # Define the mask for the ROI
    mask = np.zeros_like(edges)
    cv2.fillPoly(mask, roi_points, 255)
    masked_edges = cv2.bitwise_and(edges, mask)

    lines = cv2.HoughLinesP(masked_edges, 1, np.pi / 180, 50, np.array([]), minLineLength=100, maxLineGap=50)

   
    line_img = np.zeros((frame.shape[0], frame.shape[1], 3), dtype=np.uint8)


    if lines is not None:
        draw_lines(line_img, lines)


    combo_image = cv2.addWeighted(frame, 0.8, line_img, 1, 1)

    return combo_image


def video_loop():
    cap = cv2.VideoCapture('/Users/aidahuang/Downloads/finalprojectvid.mov') 
    if not cap.isOpened():
        print("Error opening video file")
        return

    while True:
        ret, frame = cap.read()
        if ret:
            # Detect lanes in the frame
            lane_frame = detect_lanes(frame)

   
            lane_frame = cv2.cvtColor(lane_frame, cv2.COLOR_BGR2RGB)
            image = Image.fromarray(lane_frame)
            image = ImageTk.PhotoImage(image)

            video.create_image(0, 0, anchor=tk.NW, image=image)
            root.update_idletasks()  
            root.update()
        else:
            break

    cap.release()


root = tk.Tk()
root.geometry("800x600")  
root.title("Lane Detection")

# GUI setup
video = Canvas(root, width=400, height=300, background='black')
video.pack()

thread = threading.Thread(target=video_loop, args=())
thread.start()

root.mainloop()
